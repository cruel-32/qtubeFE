require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

# React Native Firebase - iOS Setup
$RNFirebaseAsStaticFramework = true

target 'qtubeapps' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => :static

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # React Native Firebase - iOS Setup
    if defined?($RNFirebaseAsStaticFramework) && $RNFirebaseAsStaticFramework
      installer.pods_project.targets.each do |target|
        if target.name.start_with?('Firebase/')
          target.build_configurations.each do |config|
            config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
          end
        end
      end
    end

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end


  # ios/Podfile
  # ...

  post_install do |installer|
    react_native_post_install(installer)
    __apply_Xcode_settings(installer.pods_project)

    installer.pods_project.targets.each do |target|
      if target.name == 'hermes-engine'
        target.build_configurations.each do |config|
          # Hermes 엔진에 대해 dSYM 생성을 강제합니다.
          config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'DWARF with dSYM File'
          # 심볼 스트리핑 방지 (릴리즈 빌드에서 dSYM이 생성되지 않는 것을 방지)
          config.build_settings['STRIP_INSTALLED_PRODUCT'] = 'NO'
          config.build_settings['STRIP_STYLISH_SYMBOLS'] = 'NO'
          config.build_settings['STRIP_SWIFT_SYMBOLS'] = 'NO'
        end
      end
      # 앱 타겟의 Release 설정도 DWARF with dSYM File 인지 다시 확인
      if target.name == 'YOUR_APP_NAME' # YOUR_APP_NAME을 실제 앱 타겟 이름으로 변경
        target.build_configurations.each do |config|
          if config.name == 'Release' || config.name.include?('Release')
            config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'DWARF with dSYM File'
          end
        end
      end
    end
  end


end
